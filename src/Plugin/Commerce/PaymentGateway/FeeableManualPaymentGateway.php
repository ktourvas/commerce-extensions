<?php

namespace Drupal\commerce_extensions\Plugin\Commerce\PaymentGateway;

use Drupal\commerce_payment\Entity\PaymentInterface;
use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\Manual;
use Drupal\Core\Form\FormStateInterface;

/**
 * Provides the Manual payment gateway.
 *
 * @CommercePaymentGateway(
 *   id = "feeable_manual_payment_gateway",
 *   label = "Feeable Manual",
 *   display_label = "Feeable Manual",
 *   modes = {
 *     "n/a" = @Translation("N/A"),
 *   },
 *   forms = {
 *     "add-payment" = "Drupal\commerce_payment\PluginForm\ManualPaymentAddForm",
 *     "receive-payment" = "Drupal\commerce_payment\PluginForm\PaymentReceiveForm",
 *   },
 *   payment_type = "payment_manual",
 *   requires_billing_information = TRUE,
 * )
 */
class FeeableManualPaymentGateway extends Manual {

    public function createPayment(PaymentInterface $payment, $received = FALSE) {
        parent::createPayment($payment, $received); // TODO: Change the autogenerated stub
    }

    public function defaultConfiguration() {
        return [
                'fee_type' => '',
                'fee_value' => 0,
            ] + parent::defaultConfiguration();
    }

    public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
        $form = parent::buildConfigurationForm($form, $form_state);
        $form['fee_type'] = [
            '#type' => 'select',
            '#title' => $this->t('Fee type'),
            '#options' => [
                1 => $this->t('Fixed Charge'),
                2 => $this->t('Fixed Discount'),
                3 => $this->t('Percentage Charge'),
                4 => $this->t('Percentage Discount'),
            ],
        ];

        $form['fee_value'] = [
            '#type' => 'textfield',
            '#title' => $this->t('Fee value'),
            '#description' => $this->t('The value of the fee applied.'),
            '#default_value' => $this->configuration['fee_value'],
            '#required' => TRUE,
        ];

        return $form;

    }

    public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {

        parent::submitConfigurationForm($form, $form_state);
        $values = $form_state->getValue($form['#parents']);
        $this->configuration['fee_type'] = $values['fee_type'];
        $this->configuration['fee_value'] = $values['fee_value'];
        $this->configuration['collect_billing_information'] = $values['collect_billing_information'];

    }

}